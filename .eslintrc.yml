env:
  es6: true
  browser: true
  node: true
globals:
  after: readonly
  afterEach: readonly
  before: readonly
  beforeEach: readonly
  describe: readonly
  it: readonly
parser: "@typescript-eslint/parser"
plugins:
  - "@typescript-eslint"
  - mocha
  - prettier
extends:
  - eslint:recommended
  - plugin:mocha/recommended
  - plugin:@typescript-eslint/eslint-recommended
  - plugin:@typescript-eslint/recommended
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript
  - airbnb-base
  - prettier
parserOptions:
  ecmaVersion: 2019
  sourceType: module
  ecmaFeatures:
    impliedStrict: true
settings:
  import/resolver:
    node:
      extensions: [.js, .jsx, .ts, .tsx]
rules:
  prettier/prettier: error

  # Bans “// @ts-ignore” comments from being used
  # Sometimes functionality is necessary
  "@typescript-eslint/ban-ts-ignore": off

  # Require explicit accessibility modifiers on class properties and methods
  # Makes it clear
  "@typescript-eslint/explicit-member-accessibility":
    - error

  # Require explicit return types on functions and class methods
  # We want all types
  "@typescript-eslint/explicit-function-return-type":
    - error

  # Require a consistent member declaration order
  # Order what can be ordered. Alphabetize is on the way https://github.com/typescript-eslint/typescript-eslint/pull/263
  "@typescript-eslint/member-ordering":
    - error

  # Disallow generic Array constructors
  # We want to use array constructor often
  "@typescript-eslint/no-array-constructor": off

  # Disallow usage of the any type
  # That is why any can only be explicit
  "@typescript-eslint/no-explicit-any": off

  # Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean
  # We want the types to be forced
  "@typescript-eslint/no-inferrable-types": off

  # Disallow Early Use
  # There is hoisting
  "@typescript-eslint/no-use-before-define": off

  # Requires type definitions to exist
  # We want all types. Multiple options on by default
  "@typescript-eslint/typedef":
    - error
    - objectDestructuring: true
      variableDeclaration: true
      parameter: false
      arrowParameter: false

  # Require or disallow named function expressions
  # Creates too much clutter
  func-names: off

  # Enforce consistent indentation
  # Managed by prettier
  indent: off

  # Ensure consistent use of file extension within the import path
  # No extensions in typescript
  import/extensions:
    - error
    - always
    - js: never
      jsx: never
      ts: never
      tsx: never

  # Ensures that there is no resolvable path back to this module via its dependencies
  # Sometimes it is necessary to have circular dependencies
  import/no-cycle: off

  # Enforce a convention in module import order
  # Handled by ESLint
  import/order: off

  # When there is only a single export from a module, prefer using default export over named export
  # To have persistent imports there is no need for arbitrary default imports as modules will grow
  import/prefer-default-export: off

  # A file may not contain more than the specified number of classes
  # Let programmer decide
  max-classes-per-file: off

  # Disallow Array constructors
  # Let programmer decide
  no-array-constructor: off

  # The use of bitwise operators in JavaScript is very rare and often & or | is simply a mistyped && or ||, which will lead to unexpected behavior
  # Bitwise is essential
  no-bitwise: off

  # Disallow Object constructors
  # Let programmer decide
  no-new-object: off

  # Disallow Magic Numbers
  # We should use consts
  no-magic-numbers:
    - error
    - ignore:
        - 0
        - 1
        - -1

  # Disallow Reassignment of Function Parameters
  # Too annoying for class references
  no-param-reassign:
    - error
    - props: false

  # Disallow the unary operators ++ and --
  # Always
  no-plusplus: off

  # Disallow Early Use
  # There is hoisting
  no-use-before-define: off

  # Suggest using const
  # Let programmer decide
  prefer-const: off

  # Prefer destructuring from arrays and objects
  # Shorter syntax
  prefer-destructuring:
    - error

  # Checks for presence of jsdoc comments, on class declarations as well as functions
  # Properly document everything. Default is `"FunctionDeclaration": true`
  require-jsdoc:
    - error
    - require:
        MethodDefinition: true
        ClassDeclaration: true
        ArrowFunctionExpression: true
        FunctionExpression: true

  # Import Sorting
  # Sort everything
  sort-imports:
    - error

  # Require object keys to be sorted
  # Sort everything
  sort-keys: error

  # Variable Sorting
  # Sort everything
  sort-vars: error
